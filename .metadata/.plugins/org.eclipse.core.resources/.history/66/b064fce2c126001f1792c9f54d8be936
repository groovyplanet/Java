package quiz21;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexQuiz03 {

    public static void main(String[] args) {

        /*
         * 1. buffered 사용해서 건담.txt를 읽어들입니다.
         * 2. 정규 표현식을 사용해서 
         * 일련번호, 
         * 지점(건담베이스 강남점),
         * 등급[등급],
         * 상세내용,
         * 가격으로 나누어서 출력
         * 힌트) 상세내용은 정규 표현식으로 불가능하므로, 
         * 시작지점, 끝지점을 사용해서 문자열 자르기
         */

        String path = "C:\\Users\\user\\Desktop\\course\\java\\upload\\건담.txt";

        BufferedReader br = null;

        String idPattern = "[0-9]+-[0-9]+-[0-9]+";
        String cpPattern = "건담베이스 [가-힣]+점";
        String gradePattern = "\\[[A-Z가-힣]+\\]";
        String pricePattern = "[0-9]+,*[0-9]+원?";

        try {
            br = new BufferedReader(new FileReader(path));
            String str;
            while ((str = br.readLine()) != null) {
                Matcher m1 = Pattern.compile(idPattern).matcher(str);
                Matcher m2 = Pattern.compile(cpPattern).matcher(str);
                Matcher m3 = Pattern.compile(gradePattern).matcher(str);
                Matcher m5 = Pattern.compile(pricePattern).matcher(str);

                if (m1.find() && m2.find() && m3.find() && m5.find()) {
                    int startIdx = m3.end();
                    int endIdx = m5.start();
                    if (startIdx < endIdx) {
                        String etc = str.substring(startIdx, endIdx).trim();
                        System.out.println("일련번호: " + m1.group() + " 지점: " + m2.group() + " 등급: " + m3.group() + " 상세내용: " + etc + " 가격: " + m5.group());
                    } else {
                        // 상세내용이 제대로 추출되지 않았을 때의 오류 처리
                        System.out.println("Error: Invalid substring indices for line: " + str);
                    }
                } else {
                    // 매칭 실패 시의 오류 처리
                    System.out.println("Error: Matching failed for line: " + str);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
